#version 450

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_atomic_float : enable

#include "bitwise.glsl"
#include "surfelGIutils.glsl"

const int WIDTH = 1712;
const int HEIGHT = 912;

const vec2 clipConversion = vec2(1/WIDTH, 2/HEIGHT);

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// layout(push_constant) uniform constants
// {
// 	vec3 a;
// }pushC;

layout (binding = 0) buffer SurfelBuffer {
	Surfel surfelInBuffer[];
} surfels;
//layout (binding = 0) buffer FrameCount {int[] pixel;} frameBuffer;
layout (binding = 1) uniform sampler2D normalTexture;
layout (binding = 2) buffer StatsBuffer {uint stats[8];} statsBuffer;
layout (binding = 3) uniform sampler2D bluenoise;
layout (binding = 4) buffer GridBuffer {uint cells[SURFEL_TABLE_SIZE];} gridcells;
layout (binding = 5) buffer CellBuffer {uint indexSurf[SURFEL_TABLE_SIZE * 100];} surfelcells;
layout (binding = 6) uniform CameraBuffer
{
	mat4 view;
    mat4 projection;
	mat4 prevView;
	mat4 prevProj;
	vec3 pos;
	float pad0;
	vec4 nearFarFrame;
} cameraData;
layout (binding = 7) uniform sampler2D depthTexture;
layout (binding = 8, rgba8) uniform image2D debugImage;
layout (binding = 9, rgba16f) uniform image2D image;


shared uint minTile;
void main()
{	
	if (gl_LocalInvocationIndex  == 0)
	{
		minTile = not(0);
	}
	barrier();

	vec2 pixel;
	pixel.x = float(gl_GlobalInvocationID.x) + 0.5;
	pixel.y = float(gl_GlobalInvocationID.y) + 0.5;


	vec2 uv;
	uv.x = pixel.x/WIDTH;
	uv.y = pixel.y/HEIGHT;

	vec4 color = vec4(0);
	vec4 debug = vec4(0);

	float depth = texture(depthTexture, uv).x;

	//float linDepth = getLinearDepth(depth, cameraData.near, cameraData.far);

	mat4 invViewProj;
	invViewProj = inverse(cameraData.projection * cameraData.view);

	//vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth, 1.0);
    //vec4 proj_worldpos = invViewProj * screen_pos;
    vec3 worldpos = reconstructPosition(uv, depth, invViewProj);
	vec4 vec4normal = texture(normalTexture, uv);
	vec3 N = vec4normal.xyz * 2.0 - vec3(1.0);
	N = normalize(N);
	//N = (N*2) - 1;
	
	if((vec4normal.a == 0.0)){
		imageStore(debugImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 0.0));
		imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 0.0));
		return;
	}

	//vec3 P = texture(positionTexture, uv).xyz;

	vec3 P = worldpos;


	float coverage = 0;
	
	vec3 campos = vec3(0.0);

	//vec3 campos = vec3(0.0, 5.0, -10);

	ivec3 gridpos = surfel_cell(P, campos);

	//ivec3 gridpos = surfel_cell(P, fakepos);


	if (!surfel_cellvalid(gridpos))
	{
		imageStore(debugImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 0.0));
		return;
	}

	//debug = vec4(1.0, 1.0, 0.0, 0.0);

	uint cellindex = surfel_cellindex(gridpos);
	uint cellcount = gridcells.cells[cellindex];

	// for (uint i = 0; i < cell.count; ++i)
	// {
	// 	uint surfel_index = surfelcells.indexSurf[cell.offset + i];
	// 	Surfel surfel = surfels.surfelInBuffer[surfel_index];

	// 	vec3 L = surfel.position - P;
	// 	float dist2 = dot(L, L);
	// 	if (dist2 < (surfel.radius * surfel.radius))
	// 	{
	// 		//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.0, 0.0));
	// 		vec3 normal = normalize(surfel.normal);
	// 		float dotN = dot(N, normal);
	// 		if (dotN > 0)
	// 		{
	// 			float dist = sqrt(dist2);
	// 			float contribution = 1;

	// 			contribution *= clamp(dotN, 0.0, 1.0);
	// 			contribution *= clamp(1 - dist / surfel.radius, 0.0, 1.0);
	// 			contribution = smoothstep(0, 1, contribution);
	// 			coverage += contribution;

	// 			color += vec4(surfel.color, 1) * contribution;
	// 		}
	// 		if (dist2 <= (0.05 * 0.05)){
	// 			debug = vec4(1.0, 0.0, 0.0, 0.0);
	// 			//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.0, 0.0));
	// 		}
	// 	}
	// 	else{
	// 		//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 0.0));
	// 	}
	// }



	for (uint i = 0; i < cellcount; ++i)
	{
		//uint surfel_index = surfelcells.indexSurf[cell.offset + i];
		uint surfel_index = surfelcells.indexSurf[100 * cellindex + i];
		Surfel surfel = surfels.surfelInBuffer[surfel_index];

		vec3 L = surfel.position - P;
		float dist2 = dot(L, L);
		if (dist2 < (surfel.radius * surfel.radius))
		{
			//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.0, 0.0));
			vec3 normal = normalize(surfel.normal);
			float dotN = dot(N, normal);
			if (dotN > 0)
			{
				float dist = sqrt(dist2);
				float contribution = 1;

				contribution *= clamp(dotN, 0.0, 1.0);
				contribution *= clamp(1 - dist / surfel.radius, 0.0, 1.0);
				contribution = smoothstep(0, 1, contribution);
				coverage += contribution;

				color += vec4(surfel.color, 1) * contribution;
			}
			if (dist2 <= (0.05 * 0.05)){
				
				debug = vec4(1.0, 0.0, 1.0, 1.0);
				//color = vec4(surfel.color, 1.0);
				//debug = vec4(1.0, 0.0, 0.0, 0.0);
				//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.0, 0.0));
			}
		}
		else{
			//debug = vec4(surfel.color, 1.0);
			//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 0.0));
		}
	}

	if(cellcount < SURFEL_CELL_LIMIT){
		uint surfel_count_at_pixel = 0;
		// surfel_count_at_pixel = or(surfel_count_at_pixel, (uint(coverage) & 0xFF) << 8);
		// surfel_count_at_pixel = or(surfel_count_at_pixel, ((gl_LocalInvocationID.x & 0xF) << 4));
		// surfel_count_at_pixel = or(surfel_count_at_pixel, ((gl_LocalInvocationID.y & 0xF) << 0));

		surfel_count_at_pixel |= (uint(coverage) & 0xFF) << 8;
		surfel_count_at_pixel |= (gl_LocalInvocationID.x & 0xF) << 4;
		surfel_count_at_pixel |= (gl_LocalInvocationID.y & 0xF) << 0;
		minTile = atomicMin(minTile, surfel_count_at_pixel);
	}

	if (color.a > 0)
	{
		color.rgb /= color.a;
		color.a = clamp(color.a, 0.0, 1.0);
	}

	groupMemoryBarrier();
	barrier();


	uint surfel_coverage = minTile;
	uvec2 minPixel;

	minPixel.x = (surfel_coverage >> 4) & 0xF;
	minPixel.y = (surfel_coverage >> 0) & 0xF;

	uint coverage_amount = surfel_coverage >> 8;



	if (gl_LocalInvocationID.x == minPixel.x && gl_LocalInvocationID.y == minPixel.y && coverage < SURFEL_TARGET_COVERAGE)
	{

		float lineardepth = getLinearDepth(depth, cameraData.nearFarFrame[0], cameraData.nearFarFrame[1]) * (1.0/cameraData.nearFarFrame[1]);

		//float chance = pow(1 - lineardepth, 4);

		float chance = pow(1 - lineardepth, 4);

		uvec2 uvBlue = uvec2(gl_WorkGroupID.xy % 128);

		vec2 uvBlueNDC = vec2(uvBlue) / 128.0;

		vec3 rand = texture(bluenoise, uvBlueNDC).xyz;

		if (rand.x < chance){
		 	return;
		}

		uint surfel_alloc;
		surfel_alloc = atomicAdd(statsBuffer.stats[0], 1);
		if (surfel_alloc < SURFEL_CAPACITY){
			
			Surfel surfel;

			surfel.position = P;
			surfel.normal = N;

			for (uint i = 0; i < 27; ++i)
			{
				ivec3 gridpos2 = ivec3(gridpos + surfel_neighbor_offsets[i]);

				if(surfel_cellintersects(surfel, gridpos2, campos))
				{
					uint cellindex2 = surfel_cellindex(gridpos2);
					uint count2 = atomicAdd(gridcells.cells[cellindex2], 1);

					uint index2 = cellindex2 * 100 + count2;

					surfelcells.indexSurf[index2] = surfel_alloc;
				}
			}

			surfels.surfelInBuffer[surfel_alloc] = surfel;



			// uint count = atomicAdd(gridcells.cells[cellindex], 1);

			// uint index = cellindex * 100 + count;

			// surfelcells.indexSurf[index] = surfel_alloc;


//int(pushC.camPos.x);
			//surfels.surfelInBuffer[surfel_alloc].color = color.rgb;
			// surfels.surfelInBuffer[surfel_alloc].pad0 = float(gl_GlobalInvocationID.x);
			// surfels.surfelInBuffer[surfel_alloc].pad1 = float(gl_GlobalInvocationID.y);
		}
	}
	
	imageStore(debugImage, ivec2(gl_GlobalInvocationID.xy), debug);
	imageStore(image, ivec2(gl_GlobalInvocationID.xy), color);
}