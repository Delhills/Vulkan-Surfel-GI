#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "helpers.glsl"

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba8) uniform image2D image;
layout (set = 0, binding = 2) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	int frame;
} cam;
layout (set = 0, binding = 3) uniform sampler2D positionTexture;
layout (set = 0, binding = 4) uniform sampler2D normalTexture;
layout (set = 0, binding = 5) uniform sampler2D albedoTexture;
layout (set = 0, binding = 6) buffer Lights { Light lights[]; } lightsBuffer;
layout (set = 0, binding = 11) buffer MaterialBuffer { Material mat[]; } materials;
layout (set = 0, binding = 14, rgba8) uniform readonly image2D shadowImage; 
layout (set = 0, binding = 15) uniform sampler2D motionTexture;
layout (set = 0, binding = 16) uniform sampler2D materialTexture;

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;

void main()
{

	prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, cam.frame);

    const vec2 pixelCenter	= vec2(gl_LaunchIDEXT.xy) + vec2(0.5);	// gl_LaunchIDEXT represents the floating-point pixel coordinates normalized between 0 and 1
	const vec2 inUV 		= pixelCenter/vec2(gl_LaunchSizeEXT.xy);	//gl_LaunchSizeExt is the image size provided in the traceRayEXT function
	
	float matIdx 			= round(texture(positionTexture, inUV).w * 100);
	Material mat 			= materials.mat[int(matIdx)];
	int shadingMode 		= int(mat.shadingMetallicRoughness.x);

    vec3 position 			= texture(positionTexture, inUV).xyz;
	vec3 normal 			= texture(normalTexture, inUV).xyz * 2.0 - vec3(1);
	vec3 albedo 			= texture(albedoTexture, inUV).xyz;
	vec2 motion	 			= texture(motionTexture, inUV).xy;
	vec3 material 			= texture(materialTexture, inUV).xyz;
	bool background 		= texture(positionTexture, inUV).w == 0 && texture(normalTexture, inUV).w == 0;

	const float roughness 	= material.y;
	const float metallic 	= material.z;

	// Using the pixel coordinates we can apply the inverse transformation of the view and procjection matrices of the camera to obtain
	// the origin and target of the ray
	const vec4 camPosition	= cam.viewInverse * vec4(0,0,0,1);
    const vec3 V			= normalize(camPosition.xyz - position);
    const vec3 N 			= normalize(normal);

	float tmin 				= 0.001;
	float tmax 				= 10000.0;

	vec3 finalColor 		= vec3(0);
	vec3 origin 			= vec3(0);
	vec3 direction 			= vec3(0);
	float attenuation 		= 1.0;
	float shadowFactor		= imageLoad(shadowImage, ivec2(gl_LaunchIDEXT.xy)).x;

	// Calculate the light influence for each light
	for(int i = 0; i < lightsBuffer.lights.length(); i++)
	{
		Light light 					= lightsBuffer.lights[i];
		const bool isDirectional 		= light.pos.w < 0;
		vec3 L 							= isDirectional ? light.pos.xyz : (light.pos.xyz - position.xyz);
		const float light_max_distance 	= light.pos.w;
		const float light_distance 		= length(L);
		L 								= normalize(L);
		const float light_intensity 	= isDirectional ? 1.0f : (light.color.w / (light_distance * light_distance));
		const float NdotL 				= clamp(dot(N, L), 0.0, 1.0);

		int depth = 0;
		
		// Calculate attenuation factor
		// ----------------------------
		if(light_intensity == 0){
			attenuation = 0.1;
		}
		else{
			attenuation = light_max_distance - light_distance;
			attenuation /= light_max_distance;
			attenuation = max(attenuation, 0.0);
			attenuation = isDirectional ? 0.3 : (attenuation * attenuation);
		}
		
		tmax = 10000.0;

		// Calculate illumination
		//-----------------------
		// In case material is diffuse, no need to ray trace at the moment
		vec3 rayColor = vec3(1);
		if( shadingMode == 0)
		{
			vec3 radiance 	= light.color.xyz * light_intensity * attenuation * shadowFactor;
			const vec3 H 	= normalize(V + L);
			vec3 F0 		= vec3(0.04);
			F0 				= mix(F0, albedo, metallic);
			vec3 F 			= FresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
			float NDF 		= DistributionGGX(N, H, roughness);
			float G 		= GeometrySmith(N, V, L, roughness);

			vec3 numerator = NDF * G * F;
			float denominator = 4.0 * clamp(dot(N, V), 0.0, 1.0) * NdotL;
			vec3 specular = numerator / max(denominator, 0.001);

			vec3 kS = F;
			vec3 kD = vec3(1.0) - F;

			kD *= 1.0 - metallic;
			rayColor *= (kD * albedo / PI + specular) * radiance * NdotL;
			//vec3 difColor = computeDiffuse(mat, N, L);
			//rayColor *= difColor * light.color.xyz * light_intensity * attenuation * shadowFactor;
		}
		else if(shadingMode == 3)
		{
			direction 			= reflect(normalize(-V), N);
			origin 				= position;
			vec3 difColor 		= computeDiffuse(mat, N, L);
			rayColor *= difColor * light.color.xyz * light_intensity * attenuation * shadowFactor;
			for(;depth < MAX_RECURSION; depth++)
			{
				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz + direction * 1e-2, tmin, direction, tmax, 0);
				rayColor 		*= prd.colorAndDist.xyz;

				if(prd.direction.w == 0 || prd.colorAndDist.w < 0)
				{
					break;
				}
				origin 			= prd.origin;
				direction 		= prd.direction.xyz;
			}
		}
		else if(shadingMode == 4)
		{
			float ior 				= mat.diffuse.w;
			origin 					= position;
			const float cosAlpha 	= dot(N, V);
			const vec3 				I = -V; // incident ray
			float NdotI 			= dot( N, I );
			vec3 refrNormal 		= NdotI > 0.0 ? -N : N;
			float refrEta 			= NdotI > 0.0 ?  1 / ior : ior;

			prd.direction.w 		= 1;
			
			float radicand = 1 + pow(refrEta, 2.0) * (cosAlpha * cosAlpha - 1);
			direction = radicand < 0.0 ? reflect(I, N) : refract(I, refrNormal, refrEta);
			rayColor *= mat.diffuse.xyz * light_intensity * light.color.xyz;
			for(;depth < MAX_RECURSION; depth++)
			{
				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz + direction * 1e-2, tmin, direction, tmax, 0);
				rayColor *= prd.colorAndDist.xyz;

				if(prd.direction.w == 0 || prd.colorAndDist.w < 0)
				{
					break;
				}
				origin 			= prd.origin;
				direction 		= prd.direction.xyz;
			}
		}	
		finalColor += rayColor;
	}
	
	if(background)
		finalColor = albedo;

	//vec3 scolor = imageLoad(shadowImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0));
}