#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "helpers.glsl"

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba8) uniform image2D image;
layout (set = 0, binding = 2) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;
layout (set = 0, binding = 3) uniform sampler2D positionTexture;
layout (set = 0, binding = 4) uniform sampler2D normalTexture;
layout (set = 0, binding = 5) uniform sampler2D albedoTexture;
layout (std140, set = 0, binding = 7) uniform Lights { Light lights[3]; } lightsBuffer;
layout (set = 0, binding = 11) uniform MaterialBuffer { Material mat[10]; } materials;

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;

const int MAX_RECURSION = 10;

void main()
{

	uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y);
	float r1 = rnd(seed);
	float r2 = rnd(seed);

    const vec2 pixelCenter	= vec2(gl_LaunchIDEXT.xy) + vec2(r1, r2);	// gl_LaunchIDEXT represents the floating-point pixel coordinates normalized between 0 and 1
	const vec2 inUV 		= pixelCenter/vec2(gl_LaunchSizeEXT.xy);	//gl_LaunchSizeExt is the image size provided in the traceRayEXT function
	vec2 d 					= inUV * 2.0 - 1.0;

    vec3 position 			= texture(positionTexture, inUV).xyz;
	float matIdx 			= round(texture(positionTexture, inUV).w * 10);
	vec3 normal 			= texture(normalTexture, inUV).xyz * 2.0 - vec3(1);
	vec3 albedo 			= texture(albedoTexture, inUV).xyz;
	//vec4 material 		= texture(materialTexture, inUV);

	// Using the pixel coordinates we can apply the inverse transformation of the view and procjection matrices of the camera to obtain
	// the origin and target of the ray
	const vec4 camPosition	= cam.viewInverse * vec4(0,0,0,1);
    const vec3 V			= camPosition.xyz - position;
    const vec3 N 			= normalize(normal);

	float tmin 				= 0.001;
	float tmax 				= 10000.0;

	Material mat = materials.mat[int(matIdx)];

	vec3 color 		= vec3(0);
	vec3 origin 	= vec3(0);
	vec3 direction 	= vec3(0);

	for(int i = 0; i < lightsBuffer.lights.length(); i++)
	{
		Light light 				= lightsBuffer.lights[i];
		bool isDirectional 			= light.pos.w < 0;
		vec3 L 						= !isDirectional ? (light.pos.xyz - position.xyz) : light.pos.xyz;
		float NdotL 				= clamp(dot(N, normalize(L)), 0.0, 1.0);
		float light_max_distance 	= light.pos.w;
		float light_distance 		= length(L);
		tmax 						= light_distance;
		L 							= normalize(L);
		float light_intensity 		= isDirectional ? 1.0f : (light.color.w / (light_distance * light_distance));

		// Calculate attenuation factor
		float attenuation = light_max_distance - light_distance;
		attenuation /= light_max_distance;
		attenuation = max(attenuation, 0.0);
		attenuation = isDirectional ? 0.3 : (attenuation * attenuation);

		isShadowed = true;
		int depth = 0;
		
		if(NdotL > 0)
		{
			traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0xff, 1, 0, 1, position.xyz + N * 1e-2, tmin, L, tmax, 1);
			//float aux = 0.f;
			//for(int n = 0; n < MAX_RECURSION; n++)
			//{
			//	vec3 tangent, binormal;
			//	createCoordSystem(N, tangent, binormal);
			//	vec3 dir = samplingHemisphere(prd.seed, tangent, binormal, N);
			//	traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0xff, 1, 0, 1, position.xyz + N * 1e-2, tmin, dir, tmax, 1);
			//	if(!isShadowed){
			//		aux++;
			//	}
			//}
			//aux = aux / MAX_RECURSION;
			//attenuation = aux;
		}
		if(isShadowed || light_intensity == 0)
			attenuation = 0.0;
		
		tmax = 10000.0;

		// Calculate illumination
		// In case material is diffuse, no need to ray trace at the moment
		if(mat.illum == 0)
		{
			vec3 difColor = computeDiffuse(mat, N, L);
			vec3 specular = vec3(0); //isShadowed ? computeSpecular(mat, N, L, V) : vec3(0);
			color += (difColor + specular) * light.color.xyz * attenuation * light_intensity;
		}
		else if(mat.illum == 3)
		{
			direction 			= reflect(-V, N);
			origin 				= position;
			vec3 difColor 		= computeDiffuse(mat, N, L);
			for(;depth < MAX_RECURSION; depth++)
			{
				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);

				if(prd.direction.w == 0 || prd.colorAndDist.w < 0){
					color += (prd.colorAndDist.xyz * difColor) * light.color.xyz * light_intensity * attenuation;
					break;
				}
				
				origin 			= prd.origin;
				direction 		= prd.direction.xyz;
				prd.direction.w = 1;
			}
		}
		else if(mat.illum == 4)
		{
			origin 					= position;
			float NdotD 			= dot( N, -V );
			vec3 refrNormal 		= NdotD > 0.0 ? -N : N;
			float refrEta 			= NdotD > 0.0 ? 1 / mat.ior : mat.ior;
			float cosine 			= NdotD > 0.0 ? mat.ior * NdotD : -NdotD;

			vec3 refracted 			= refract( -V, refrNormal, refrEta );
			const float reflectProb = refracted != vec3(0) ? Schlick( cosine, mat.ior ) : 1;
			prd.direction.w 		= 1;
			
			direction = rnd(prd.seed) < reflectProb ? reflect(-V, N) : refracted;

			for(;depth < MAX_RECURSION; depth++)
			{
				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz /*+ normalize(direction) * 0.01*/, tmin, direction, tmax, 0);

				if(prd.direction.w == 0 || prd.colorAndDist.w < 0){
					//color += (prd.colorAndDist.xyz * light.color.xyz) * light_intensity;
					color += prd.colorAndDist.xyz;// * light.color.xyz;
					break;
				}
				
				origin 			= prd.origin;
				direction 		= prd.direction.xyz;
				prd.direction.w = 1;
			}
		}
	}

	color *= albedo;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}