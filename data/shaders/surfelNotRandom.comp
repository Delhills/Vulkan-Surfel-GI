#version 450

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_atomic_float : enable
const int WIDTH = 1712;
const int HEIGHT = 912;

const vec2 clipConversion = vec2(1/WIDTH, 2/HEIGHT);

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform constants
{
	vec3 a;
}pushC;

shared int minSurfel;

struct Surfel
{
	vec3 position;
	vec3 normal;
	vec3 color;
	float radius;
};

struct SurfelGridCell
{
	int count;
	int offset;
};


const vec3 SURFEL_GRID_DIMENSIONS = vec3(80, 40, 80);
const int SURFEL_TABLE_SIZE = 1048576;
const float SURFEL_MAX_RADIUS = 1;
const int SURFEL_CAPACITY = 250000;

layout (binding = 0) buffer SurfelBuffer {
	Surfel surfelInBuffer[];
} surfels;
//layout (binding = 0) buffer FrameCount {int[] pixel;} frameBuffer;
layout (binding = 1) uniform sampler2D normalTexture;
layout (binding = 2) buffer StatsBuffer {int stats[5];} statsBuffer;
layout (binding = 3) uniform sampler2D positionTexture;
layout (binding = 4) buffer GridBuffer {
	SurfelGridCell cells[];
} gridcells;
layout (binding = 5) buffer CellBuffer {int cell[];} surfelcells;
layout (binding = 6) uniform CameraBuffer
{
	mat4 view;
    mat4 projection;
	mat4 prevView;
	mat4 prevProj;
	vec3 pos;
} cameraData;
//layout (binding = 7) buffer CamPosBuffer {vec3 pos;} camPos;

//////////meter camara pos TA MAl

bool surfel_cellvalid(vec3 cell){
	if (cell.x < 0 || cell.x >= SURFEL_GRID_DIMENSIONS.x)
		return false;
	if (cell.y < 0 || cell.y >= SURFEL_GRID_DIMENSIONS.y)
		return false;
	if (cell.z < 0 || cell.z >= SURFEL_GRID_DIMENSIONS.z)
		return false;
	return true;
}

int flatten3D(vec3 coord, vec3 dim)
{
	return int((coord.z * dim.x * dim.y) + (coord.y * dim.x) + coord.x);
}

vec3 reconstructPosition(vec2 uv, float z, mat4 inverseProj)
{
	float x = uv.x * 2 - 1;
	float y = (1 - uv.y) * 2 - 1;
	vec4 position_s = vec4(x, y, z, 1);
	vec4 position_v = inverseProj * position_s;
	return position_v.xyz / position_v.w;
}

void main()
{	
	if (gl_LocalInvocationIndex == 0)
	{
		minSurfel = !0;
	}

	barrier();

	vec2 pixel;
	pixel.x = float(gl_GlobalInvocationID.x);
	pixel.y = float(gl_GlobalInvocationID.y);

	vec2 N = texture(normalTexture, pixel).xy;
	float depth = float(texture(depthTexture, pixel));

	if(depth >= 1.0) return;

	// mat4 invViewProj;
	// invProj = inverse(cameraData.projection);

	// vec2 uv = (pixel) * clipConversion;
	// vec3 P = reconstructPosition(uv, depth, invProj);

	vec3 P = texture(positionTexture, pixel).xyz;

	//if((P.x = 0.0) & (P.y = 0.0) & (P.z = 0.0)) return;

	float coverage = 0;

	vec3 gridpos = floor((P - floor(cameraData.camPos)) / SURFEL_MAX_RADIUS) + SURFEL_GRID_DIMENSIONS / 2;

	if (!surfel_cellvalid(gridpos))
	{
		return;
	}

	int cellindex = flatten3D(gridpos, SURFEL_GRID_DIMENSIONS);

	SurfelGridCell cell = gridcells.cells[cellindex];
	int index = int(16 * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y);
	//for (uint i = 0; i < cell.count; ++i)
	//{
	//	int surfel_index = surfelcells.cell[cell.offset + i];
	Surfel localSurfel;
	localSurfel.position = vec3(1, 0, 0) + P;
	localSurfel.radius = 0.9;
	vec3 normal = normalize(vec3(1, 1, 1));
	vec3 L = localSurfel.position - P;
	float dist2 = dot(L, L);
	if (dist2 < (localSurfel.radius*localSurfel.radius))
	{
		//vec3 normal = surfel.normal;
		float dotN = dot(N, normal);
		if (dotN > 0)
		{
			float dist = sqrt(dist2);
			float contribution = 1;

			contribution *= saturate(dotN);
			contribution *= saturate(1 - dist / localSurfel.radius);
			contribution = smoothstep(0, 1, contribution);
			coverage += contribution;
			//color += vec4(surfel.color, 1) * contribution;
		}
	}
	vec3 vec = vec3(1, 1);
	surfels.surfelInBuffer[index] = localSurfel;
	//}
	// // Surfel localSurfel;
	// // localSurfel.position = gl_LocalInvocationID;
	// // localSurfel.normal = int(pushC.camPos.x);
	// // localSurfel.color = pushC.camPos;
	// // localSurfel.radius = 1.0;


	//int index = int(16 * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y);

	// int x_coord = 16 * int(gl_GlobalInvocationID.x) + 8;

	// int y_coord = 16 * int(gl_GlobalInvocationID.y) + 8;

	// if(index < SURFEL_CAPACITY){
	// 	surfels.surfelInBuffer[index].position = gl_GlobalInvocationID;
	// 	surfels.surfelInBuffer[index].normal = SURFEL_CAPACITY;//int(pushC.camPos.x);
	//surfels.surfelInBuffer[index].color = P;
	// 	surfels.surfelInBuffer[index].radius = 1.0;
	// }

	// barrier();


	// if(cellindex < SURFEL_TABLE_SIZE){
	// 	gridcells.cells[index].count = int(cameraData.pos.x);
	// 	gridcells.cells[index].offset = int(cameraData.pos.y);
	// 	atomicAdd(gridcells.cells[0].count, 1);
	// }


	// barrier();


	// if(index < SURFEL_CAPACITY){
	// 	surfelcells.cell[index] = int(cameraData.pos.x);
	// }
	
	// barrier();

	//texelBuffer.pixel[index].x = int(gl_LocalInvocationID.x);
	//texelBuffer.pixel[index].y = int(gl_LocalInvocationID.y);


}