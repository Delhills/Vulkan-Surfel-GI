#version 450

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_atomic_float : enable

#include "bitwise.glsl"
#include "surfelGIutils.glsl"

const int WIDTH = 1712;
const int HEIGHT = 912;


layout (local_size_x = SURFEL_INDIRECT_NUMTHREADS, local_size_y = 1, local_size_z = 1) in;

// layout(push_constant) uniform constants
// {
// 	vec3 a;
// }pushC;

layout (binding = 0) buffer SurfelBuffer {
	Surfel surfelInBuffer[];
} surfels;

layout (binding = 1) buffer StatsBuffer {uint stats[8];} statsBuffer;

layout (binding = 2) buffer GridBuffer {
	SurfelGridCell cells[];
} gridcells;

layout (binding = 3) buffer CellBuffer {uint indexSurf[];} surfelcells;

layout (binding = 4) buffer SurfelDataBuffer {
	SurfelData surfelDataInBuffer[];
} surfelsData;

void MultiscaleMeanEstimator(
	vec3 y,
	inout SurfelData data
)
{
	vec3 mean = data.mean;
	vec3 shortMean = data.shortMean;
	float vbbr = data.vbbr;
	vec3 variance = data.variance;
	float inconsistency = data.inconsistency;

	// Suppress fireflies.
	{
		vec3 dev = sqrt(max(vec3(1e-5), variance));
		vec3 highThreshold = vec3(0.1) + shortMean + dev * 8;
		vec3 overflow = max(vec3(0), y - highThreshold);
		y -= overflow;
	}

	vec3 delta = y - shortMean;
	shortMean = mix(shortMean, y, vec3(0.08));
	vec3 delta2 = y - shortMean;

	// This should be a longer window than shortWindowBlend to avoid bias
	// from the variance getting smaller when the short-term mean does.
	float varianceBlend = 0.08 * 0.5;
	variance = mix(variance, delta * delta2, varianceBlend);
	vec3 dev = sqrt(max(vec3(1e-5), variance));

	vec3 shortDiff = mean - shortMean;

	float relativeDiff = dot(vec3(0.299, 0.587, 0.114),
		abs(shortDiff) / max(vec3(1e-5), dev));
	inconsistency = mix(inconsistency, relativeDiff, 0.08);

	float varianceBasedBlendReduction =
		clamp(dot(vec3(0.299, 0.587, 0.114),
			0.5 * shortMean / max(vec3(1e-5), dev)), 1.0 / 32, 1);

	vec3 catchUpBlend = vec3(clamp(smoothstep(0, 1,
		relativeDiff * max(0.02, inconsistency - 0.2)), 1.0 / 256, 1));
	catchUpBlend *= vbbr;

	vbbr = mix(vbbr, varianceBasedBlendReduction, 0.1);
	mean = mix(mean, y, clamp(vec3(0.0), vec3(1.0), catchUpBlend));

	// Output
	data.mean = mean;
	data.shortMean = shortMean;
	data.vbbr = vbbr;
	data.variance = variance;
	data.inconsistency = inconsistency;
}






void main()
{
	uint surfel_count = statsBuffer.stats[0];
	if (gl_GlobalInvocationID.x  >= surfel_count)
	{
		return;
	}

	int surfel_index = int(gl_GlobalInvocationID.x);

	SurfelData surfel_data = surfelsData.surfelDataInBuffer[surfel_index];
	Surfel surfel = surfels.surfelInBuffer[surfel_index];

	vec4 result = vec4(surfel_data.traceresult, 1.0);

	vec3 pos = surfel_data.hitpos;
	vec3 N = normalize(surfel_data.hitnormal);

	vec4 surfelGI = vec4(0.0);

	for (uint i = 0; i < statsBuffer.stats[0]; ++i)
	{
		//uint surfel_index = surfelcells.indexSurf[cell.offset + i];
		Surfel surfel = surfels.surfelInBuffer[i];

		vec3 L = surfel.position - pos;
		float dist2 = dot(L, L);
		if (dist2 < (surfel.radius * surfel.radius))
		{
			//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.0, 0.0));
			vec3 normal = normalize(surfel.normal);
			float dotN = dot(N, normal);
			if (dotN > 0)
			{
				float dist = sqrt(dist2);
				float contribution = 1;

				contribution *= clamp(1 - dist / surfel.radius, 0.0, 1.0);
				contribution = smoothstep(0, 1, contribution);
				contribution *= clamp(dotN, 0.0, 1.0);

				surfelGI += vec4(surfel.color, 1) * contribution;
			}
		}
	}

	if (surfelGI.a > 0)
	{
		surfelGI.rgb = surfelGI.rgb / surfelGI.a;
		surfelGI.a = clamp(0.0, 1.0, surfelGI.a);
		result.rgb += max(vec3(0), surfel_data.hitenergy * surfelGI.rgb);
	}

	vec3 surfpos = surfel.position;
	vec3 surfN = normalize(surfel.normal);
	float surfrad = surfel.radius;

	for (uint i = 0; i < statsBuffer.stats[0]; ++i)
	{
	// 	//uint surfel_index = surfelcells.indexSurf[cell.offset + i];

		Surfel surfel2 = surfels.surfelInBuffer[i];
	 	surfel2.radius += surfrad;

	 	vec3 L = surfel2.position - surfpos;
	 	float dist2 = dot(L, L);
	 	if (dist2 < (surfel2.radius * surfel2.radius))
	 	{
	// 		//imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.0, 0.0));
	 		vec3 normal = normalize(surfel2.normal);
	 		float dotN = dot(surfN, normal);
	 		if (dotN > 0)
	 		{
	 			float dist = sqrt(dist2);
	 			float contribution = 1;

	 			contribution *= clamp(1 - dist / surfel2.radius, 0.0, 1.0);
	 			contribution = smoothstep(0, 1, contribution);
	 			contribution *= clamp(dotN, 0.0, 1.0);

	 			result += vec4(surfel2.color, 1) * contribution;
	 		}
	 	}
	}

	result.rgb = result.rgb / result.a;
	MultiscaleMeanEstimator(result.rgb, surfel_data);
	//surfel.color = surfel_data.mean;
	//surfel_data.mean = result.rgb;
	
	surfelsData.surfelDataInBuffer[surfel_index] = surfel_data;

	//surfels.surfelInBuffer[surfel_index] = surfel;


}