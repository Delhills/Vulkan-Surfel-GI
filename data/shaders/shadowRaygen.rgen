#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "helpers.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	float frame;
} cam;

struct shadowPayload{
	uint seed;
	float frame;
};

layout(location = 0) rayPayloadEXT shadowPayload prd;

void main() 
{
	prd.frame = cam.frame;
	prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, uint(prd.frame));

	for(int nS = 0; nS < NSAMPLES; nS++)
	{
		float r1 				= rnd(prd.seed);
		float r2 				= rnd(prd.seed);
		vec2 pixel_offset 		= nS == 0 ? vec2(0.5) : vec2(r1, r2);
		const vec2 pixelCenter 	= vec2(gl_LaunchIDEXT.xy) + pixel_offset;	// gl_LaunchIDEXT represents the floating-point pixel coordinates normalized between 0 and 1
		const vec2 inUV 		= pixelCenter/vec2(gl_LaunchSizeEXT.xy);	//gl_LaunchSizeExt is the image size provided in the traceRayEXT function
		vec2 d 					= inUV * 2.0 - 1.0;

		// Using the pixel coordinates we can apply the inverse transformation of the view and procjection matrices of the camera to obtain
		// the origin and target of the ray
		vec4 origin		= cam.viewInverse * vec4(0,0,0,1);
		vec4 target		= cam.projInverse * vec4(d.x, d.y, 1, 1) ;
		vec4 direction	= cam.viewInverse * vec4(normalize(target.xyz), 0);

		float tmin 		= 0.001;
		float tmax 		= 10000.0;

		// Call the function to start tracing rays.
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz + direction.xyz * 1e-2, tmin, direction.xyz, tmax, 0);
	}
}
